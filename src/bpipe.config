//----------------------------------------------------------------
// Warpy shared configuration file
//
// This file contains core configuration for Warpy. These sit in two
// sections:
//
// - configuration you must modify with each deployment instance to set critical 
//   paths and settings
// - configuration that is common across multiple deployments. This is 
//   designed to be maintained with the source code
//

//--------------------- deployment configuration : modify these per-deployment

// Full path to the location of genome reference data
REF_BASE='SETME'

REF="$REF_BASE/SETME"

XIMMER_HOME='SETME'

// custom_storage_mounts = ['hpc_root', 'tmp_root', 'group_root', 'misc_root', 'ngs_root']
custom_storage_mounts  = []

container_engine = "docker"

//--------------------- not for routine modification per deployment

parameters {
    setProperty('BASE',BASE)
    setProperty('REF_BASE',REF_BASE)
    setProperty('REF',REF)
    
    // Default YAML format samples parser.
    // Override in specific environments to use alternative sample file formats
    samples_parser = { configFile ->
         println "Reading samples from: $configFile"
         return configFile
                .withReader { r -> Collections.synchronizedMap(new org.yaml.snakeyaml.Yaml().load(r)) }
                .samples
                .collectEntries { [ it.identifier,  it ] } as Map
    }
    
    REF_MMI=REF.replaceAll('\\.[^.]*$','.mmi')
    
    // SV annotations
    GNOMAD_SV_VCF="$REF_BASE/gnomad.v4.0.sv.basic.vcf.gz"

    // Gencode
    GENCODE_GTF="$REF_BASE/gencode.v46.basic.annotation.gtf"
    

    tools {
        // Full path to samtools
        SAMTOOLS="samtools"
        
        // Full path to dorado
        DORADO="dorado"
        
        // Full path to minimap2
        MINIMAP2="minimap2"

        // Full path to pod5 Python package
        POD5="pod5"

        // Full path to bamstats 
        BAMSTATS="bamstats"

        // Fill path to Clair3
        CLAIR3="/opt/bin"

        PYPY="pypy"

        PARALLEL="parallel"
        
        WHATSHAP="whatshap"
        
        LONGPHASE="longphase"

        XIMMER=XIMMER_HOME

        GROOVY="$BASE/tools/bpipe/0.9.13/bin/bpipe-groovy"

        STRVCTVRE_HOME="/opt/StrVCTVRE"

    }

    model {
        params {
            basecaller_basemod_threads = 0
            remora_cfg = null
            remora_model_path = null
            // drd_model = 'dna_r10.4.1_e8.2_400bps_sup@v4.0.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.0.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.1.0'
            drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.2.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.3.0'
        }
    }
    
    calling {
        CLAIR3_MODELS_PATH="$BASE/models/Clair3"
        enable_gvcf = true
        snp_min_af = 0.08
        indel_min_af = 0.15
        qscore_filter = 10
        ref_pct_full = 0.1
        var_pct_full = 0.7
        phasing_pct = 0.7
        
        // Full alignment
        min_mq = 5
        min_cov = 2
        
        // SV calling
        tr_bed = "$BASE/data/human_GRCh38_no_alt_analysis_set.trf.bed"
        cluster_merge_pos = 150
        min_sv_length = 30
        max_sv_length = 100000
        min_read_support = "auto"
        min_read_support_limit = 2
        sv_types = "DEL,INS,DUP,INV,BND"

        // STR calling
        repeats_bed = "$BASE/data/wf_str_repeats.bed"
        variant_catalogue_hg38 = "$BASE/data/variant_catalog_hg38.json"
     }
}

environments {
    
    def common_binds = {
        scripts_bin { type='bind'; base="$BASE/scripts" }
        data { type='bind'; base="$BASE/data" }
        designs { type='bind'; base="$BASE/designs" }
        models { type='bind'; base="$BASE/models" }
        reference_data { type='bind'; base="$REF_BASE" }
        ximmer { type='bind'; base=XIMMER_HOME }
    }
    
    mcri {

        REF_BASE='/hpc/genomeref/hg38/v0'
        HPC_TMP='/ibm/hpcfs1/tmp'

        XIMMER_HOME="/hpc/bpipeLibrary/shared/ximmer"
        PHYLOP100WAY="/hpc/genomeref/hg38/annotation/StrVCTVRE/hg38.phyloP100way.bw"

        executor="torque"
        queue="batch"
        mem_param="mem"
        memory="8"
        proc_mode=1

        parameters {
            setProperty('HPC_TMP',HPC_TMP)
            REF="$REF_BASE/Homo_sapiens_assembly38.fasta"
            REF_MMI="$BASE/data/hg38/ref.mmi"
            XIMMER='/hpc/bpipeLibrary/shared/ximmer-test'
            GENCODE_GTF='/hpc/genomeref/hg38/annotation/gatk-sv/MANE.GRCh38.v1.2.ensembl_genomic.gtf'
        }
        
        filesystems {

            // standard binds
            common_binds()

            // custom for mcri
            genomeref { type='bind'; base='/hpc/genomeref' }
            hpc_root { type='bind'; base='/hpc' }
            group_root { type='bind'; base='/group' }
            misc_root { type='bind'; base='/misc' }
            ngs_root { type='bind'; base='/ngs' }
            reference_data { type='bind'; base="$REF_BASE" }
            tmp_root { type='bind'; base="$HPC_TMP" }
            scratch { type='bind';; base='/scratch' }
            scratch_tmp { type='bind'; base='/scratch/tmp' }
            ont_samples { type='bind'; base="$BASE/ONT_samples" } 
            giab_samples { type='bind'; base='/group/bioi1/shared/ONT_giab_data/warpy' }
        }        
        
        stages {
            strvctvre_annotate {
                // confused how it can need htslib as a module if it runs in the container
                modules="singularity/3.8.4 htslib"
                container='strvctvre'
            }
        }
    }
    
    mac_dev {
        parameters {
            
            PHYLOP100WAY="$XIMMER_HOME/tools/StrVCTVRE/data/hg38.phyloP100way.chr21.bw"
            
            tools {
                // Full path to samtools
                SAMTOOLS='/opt/homebrew/bin/samtools'
                
                // Full path to dorado
                DORADO="$BASE/tools/dorado-0.5.0-osx-arm64/bin/dorado"
                
                // Full path to minimap2
                MINIMAP2='/opt/homebrew/bin/minimap2'
        
                // Full path to pod5 Python package (installed via pip)
                POD5='/opt/miniconda3/envs/ont_tools/bin/pod5'
        
                // Full path to bamstats (installed via Conda)
                //BAMSTATS='/opt/miniconda3/envs/ont_tools/bin/bamstats'
                BAMSTATS='bamstats'
        
                // Fill path to Clair3
                CLAIR3="$BASE/tools/Clair3"
        
                PYPY="$CLAIR3/pypy3.9-v7.3.8-osx64/bin/pypy"
        
                PARALLEL="/opt/homebrew/bin/parallel"
                
                WHATSHAP="$HOME/.local/bin/whatshap"
                
                LONGPHASE="$CLAIR3/longphase-1.5/longphase"
            }
        }
        
        filesystems {
            common_binds()
        }
        
        
        stages {
            make_clair3_chunks { container=null; conda_env="clair3-arm64"  }
            pileup_variants { container=null; conda_env="clair3-arm64"  }
            aggregate_pileup_variants { container=null; conda_env="clair3-arm64" }
            select_het_snps  { container=null; conda_env="clair3-arm64" }
            phase_contig { container=null; conda_env="clair3-arm64" }
            get_qual_filter  { container=null; conda_env="clair3-arm64"  }
            create_candidates { container=null; conda_env="clair3-arm64" }
            evaluate_candidates  { container=null; memory=12; conda_env="clair3-arm64"  }
            aggregate_full_align_variants { container=null; conda_env="clair3-arm64"  }
            merge_pileup_and_full_vars { container=null; conda_env="clair3-arm64"  }
            aggregate_all_variants  { container=null; conda_env="clair3-arm64"  }
            sv_annotate { container='gatk' }
            strvctvre_annotate { container='strvctvre'; conda_env="StrVCTVRE_py_3"; conda { executable='/opt/conda/bin/conda' } }
            read_stats { container='common_tools' }
            ximmer_summarize { memory="24g" }
        }
    }
}



limits {
    // How many copies of dorado can run at once: set to the number of GPUs 
    // that are accessible to the pipeline / how many you would like to use in parallel
    dorados = 1
}

// if using singularity, assume an HPC environment with module support to load signularity
default_modules = (container_engine == "docker" ? "" : "singularity/3.8.4")

containers {
    if(container_engine == "singularity") {
    

        common_tools {
            type='singularity'
            image="$BASE/tools/containers/ontresearch_dorado_4fdf39cb5afe.sif"
            // image='docker:\\/\\/ontresearch/dorado:sha77d65161488047f5cf68cee96c68e60032bc004d'
            storage=['reference_data', 'designs', 'models', 'data', *custom_storage_mounts]
        }

        dorado_gpu {
            type='singularity'
            // image="$BASE/tools/ontresearch_dorado_4fdf39cb5afe.sif"
            image='docker:\\/\\/ontresearch/dorado:sha77d65161488047f5cf68cee96c68e60032bc004d'
            storage=['models', *custom_storage_mounts]
            execOptions='--nv'
        }

        clair3 {
            type='singularity'
            image="$BASE/tools/containers/clair3_v1.0.8.sif"
            // image='docker:\\/\\/hkubal/clair3:v1.0.8'
            storage=['reference_data', 'models', *custom_storage_mounts]
        }

        mosdepth {
            type='singularity'
            // image="$BASE/tools/containers/ontresearch_wf-human-variation_558fdf2855c5.sif"
            image='docker:\\/\\/ontresearch/wf-human-variation:shac25488b73e47cf38b1cb4ed89339920ed347b59e'
            storage=['reference_data', 'designs', *custom_storage_mounts]
        }

        sniffles {
            type='singularity'
            image="$BASE/tools/containers/ontresearch_wf-human-variation-sv_7104a232cd4b.sif"
            // image='docker:\\/\\/ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9'
            storage=['reference_data', 'data']
        }

        sniffles_filter {
            type='singularity'
            image="$BASE/tools/containers/ontresearch_wf-human-variation-sv_7104a232cd4b.sif"
            // image='docker:\\/\\/ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9'
            storage=['scripts_bin', 'designs', *custom_storage_mounts]
        }

        str_container {
            type = 'singularity'
            image="$BASE/tools/containers/wf-human-variation-str_sha8a8df7d40e0c9125ed43b347811afd14a077f94e.sif"
            // image = 'docker:\\/\\/ontresearch/wf-human-variation-str:sha8a8df7d40e0c9125ed43b347811afd14a077f94e'
            
            storage = ['reference_data', 'data', 'scripts_bin', *custom_storage_mounts]
        }

        modkit {
            type='singularity'
            // image="$BASE/tools/ontresearch_modkit_79dd46d51ab7.sif"
            image='docker:\\/\\/ontresearch/modkit:mr398_shab20df82474168dd15e8ace78ff38b8bcb8b7b6fb'
            storage=['reference_data', 'designs']
        }
        
        gatk {
            type='singularity'
            // image="$BASE/tools/gatk-4.5.0.0.sif"
            image='docker:\\/\\/broadinstitute/gatk:4.5.0.0'
            storage=['reference_data', 'designs', *custom_storage_mounts]
        }
        
        strvctvre {
            type = 'singularity'
            // image = 'strvctvre_v1.10.sif'
            image='docker:\\/\\/gitci-test.mcri.edu.au:5000/mcri/strvctvre:latest'
            storage = ['reference_data', 'data', *custom_storage_mounts]
            execOptions='--nohttps'
        }
    }
    else
    if(container_engine == "docker") {
        common_tools {
            type = 'docker'
            image = "ontresearch/wf-human-variation:shae4e5f94d1cd0ea009df54797bbe6ee09a53e911e"
            storage = ['reference_data', 'designs']
        }

        sniffles_filter {
            type='singularity'
            image="$BASE/tools/ontresearch_wf-human-variation-sv_7104a232cd4b.sif"
            storage=['scripts_bin', 'designs', 'tmp_root']
        }

        sniffles {
            type = 'docker'
            image = "ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9"
            storage = ['reference_data', 'data']
        }

        modkit {
            type='singularity'
            image="$BASE/tools/ontresearch_modkit_79dd46d51ab7.sif"
            storage=['reference_data', 'designs']
        }

        sniffles_filter {
            type = 'docker'
            image = "ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9"
            storage = ['scripts_bin', 'designs']
        }

        str_container {
            type = 'docker'
            image = 'ontresearch/wf-human-variation-str:sha8a8df7d40e0c9125ed43b347811afd14a077f94e'
            storage = ['reference_data','data','scripts_bin']
        }

        modkit {
            type = 'docker'
            image = 'ontresearch/modkit:mr442_sha410f0f8611f29685a4005e76eb4d5dfc954a739a'
            storage = ['reference_data','data']
        }

        gatk {
            type = 'docker'
            image = 'broadinstitute/gatk:4.5.0.0'
            storage = ['reference_data','data']
        }
        
        strvctvre {
            type = 'docker'
            image = 'strvctvre:latest'
            storage = ['reference_data','data','ximmer']
        }
    }
}


stages {
    merge_pod5 {
        walltime="24:00:00"
        memory="16g"
        // queue="shortrun"
        modules=default_modules
        container='ontresearch_dorado'
    }

    convert_fast5_to_pod5 {
        modules=default_modules
        walltime="1:00:00"
        procs=4
        memory="16g"
        container='common_tools'
    }

    dorado {
        modules=default_modules
        walltime="12:00:00"
        procs=4
        memory="256g"
        gpus=4
        queue='gpu'
        container='dorado_gpu'
    }

    make_mmi {
        modules=default_modules
        walltime="1:00:00"
        procs=4
        memory="16g"
        container='common_tools'
    }

    minimap2_align { 
        modules=default_modules
        walltime="8:00:00"
        procs=8
        memory="64g"
        container='common_tools' }

    merge_pass_calls {
        modules=default_modules
        walltime="2:00:00"
        procs=4
        memory="16g"
        container='common_tools'
    }

    mosdepth {
        modules=default_modules
        walltime="2:00:00"
        procs=4
        memory="16g"
        container='common_tools'
    }

    read_stats {
        modules=default_modules
        walltime="2:00:00"
        procs=4
        memory="8g"
        container='sniffles'
    }

    make_clair3_chunks {
        modules=default_modules
        walltime="2:00:00"
        procs=4
        memory="8g"
        container='clair3'
    }

    pileup_variants {
        modules=default_modules
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    aggregate_pileup_variants {
        modules=default_modules
        walltime="2:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    select_het_snps {
        modules=default_modules
        walltime="2:00:00"
        procs=1
        memory="16g"
        container='clair3'
    }

    phase_contig {
        modules=default_modules
        walltime="4:00:00"
        procs=4
        memory="16g"
        container='clair3'
    }

    get_qual_filter {
        modules=default_modules
        walltime="2:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    create_candidates {
        modules=default_modules
        walltime="2:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    evaluate_candidates {
        modules=default_modules
        walltime="2:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    aggregate_full_align_variants {
        modules=default_modules
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    merge_pileup_and_full_vars {
        modules=default_modules
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    aggregate_all_variants {
        modules=default_modules
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='clair3'
    }

    combine_family_gvcfs {
        modules="htslib"
    }

    filterBam {
        modules=default_modules
        queue='batch'
        walltime="1:00:00"
        procs=4
        memory="16g"
        container='common_tools'
    }

    make_clair3_chunks {
        modules=default_modules
        container='clair3'
    }

    sniffles2 {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=8
        memory="32g"
        container='sniffles'
    }

    sniffles2_for_trios {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=8
        memory="32g"
        container='sniffles'
    }

    sniffles2_joint_call {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=8
        memory="32g"
        container='sniffles'
    }

    sort_sv_vcf {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='sniffles'
    }

    filter_sv_calls {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=1
        memory="4g"
        container='sniffles_filter'
    }

    bam2bedmethyl {
        modules=default_modules
        queue='batch'
        walltime="4:00:00"
        procs=1
        memory="8g"
        container='modkit'
    }

    call_str {
        modules=default_modules
        container = "str_container" 
    }
    annotate_repeat_expansions  {
        modules=default_modules
        container = "str_container"
    }
    merge_str_tsv  {
        modules=default_modules
        container = "clair3"
    }
    merge_str_vcf  {
        modules="htslib bcftools"
    }
    
    read_stats {
        modules=default_modules
        container = "clair3"
    }
    make_str_report  {
        modules=default_modules
        container = "str_container"
    }
    
    sv_annotate {
        modules=default_modules
        container='gatk'
    }

    strvctvre_annotate {
        modules=default_modules
        container='strvctvre'
    }
}