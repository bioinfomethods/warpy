

// Full path to the location of your warpy installation
BASE='SETME'
REF_BASE='SETME'

libs=["$BASE/lib/groovy-ngs-utils.jar"]

//Assume Miniconda and Homebrew are installed under /opt
parameters {
    setProperty('BASE',BASE)
    REF="$REF_BASE/Homo_sapiens_assembly38.fasta"
    REF_MMI="$BASE/data/hg38/ref.mmi"

    tools {
        // Full path to samtools
        SAMTOOLS='/opt/homebrew/bin/samtools'
        
        // Full path to dorado
        DORADO="$BASE/tools/dorado-0.5.0-osx-arm64/bin/dorado"
        
        // Full path to minimap2
        MINIMAP2='/opt/homebrew/bin/minimap2'

        // Full path to pod5 Python package (installed via pip)
        POD5='pod5'

        // Full path to bamstats (installed via Conda)
        BAMSTATS='bamstats'

        // Fill path to Clair3
        CLAIR3="$BASE/tools/Clair3"

        PYPY="$CLAIR3/pypy3.9-v7.3.8-osx64/bin/pypy"

        PARALLEL="/opt/homebrew/bin/parallel"
        
        WHATSHAP="$HOME/.local/bin/whatshap"
        
        LONGPHASE="$CLAIR3/longphase-1.5/longphase"
    }

    model {
        params {
            basecaller_basemod_threads = 0
            remora_cfg = null
            remora_model_path = null
            // drd_model = 'dna_r10.4.1_e8.2_400bps_sup@v4.0.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.0.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.1.0'
            // drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.2.0'
            drd_model = 'dna_r10.4.1_e8.2_400bps_hac@v4.3.0'
        }
    }
    
    calling {
        snp_min_af = 0.08
        indel_min_af = 0.15
        qscore_filter = 10
        ref_pct_full = 0.1
        var_pct_full = 0.7
        phasing_pct = 0.7
        
        // Full alignment
        min_mq = 5
        min_cov = 2
        
        // SV calling
        tr_bed = "$BASE/data/human_GRCh38_no_alt_analysis_set.trf.bed"
        cluster_merge_pos = 150
        min_sv_length = 30
        max_sv_length = 100000
        min_read_support = "auto"
        min_read_support_limit = 2
        sv_types = "DEL,INS"

        // STR calling
        repeats_bed = "$BASE/data/wf_str_repeats.bed"
        variant_catalogue_hg38 = "$BASE/data/variant_catalog_hg38.json"
     }
}

filesystems {
    reference_data {
        type='bind'
        base="$REF_BASE" // Full path to the location your reference data is in (this is used to mount it into containers)
    }
    
    scripts_bin {
        type='bind'
        base="$BASE/scripts"
    }
    
    data {
        type='bind'
        base="$BASE/data"
    }

    designs {
        type='bind'
        base="$BASE/designs"
    }
}

limits {
    // How many copies of dorado can run at once: set to the number of GPUs 
    // that are accessible to the pipeline / how many you would like to use in parallel
    dorados = 1
}

containers {
    mosdepth_docker {
        type = 'docker'
        image = "quay.io/biocontainers/mosdepth:0.3.4--hd299d5a_0"
        storage = ['reference_data', 'designs']
    }

    sniffles {
        type = 'docker'
        image = "ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9"
        storage = ['reference_data', 'data']
    }

    sniffles_filter {
        type = 'docker'
        image = "ontresearch/wf-human-variation-sv:shabc3ac908a14705f248cdf49f218956ec33e93ef9"
        storage = ['scripts_bin', 'designs']
    }
        
    str_container {
        type = 'docker'
        image = 'ontresearch/wf-human-variation-str:sha8a8df7d40e0c9125ed43b347811afd14a077f94e'
        storage = ['reference_data','data','scripts_bin']
    }
}

conda {
    executable = '/opt/miniconda3/bin/conda'
}

stages {
    convert_fast5_to_pod5 { conda_env = 'ont_tools' }
    mosdepth  { container = 'mosdepth_docker' }
    read_stats { conda_env = 'ont_tools' }
    make_clair3_chunks { conda_env = 'clair3-arm64' }
    pileup_variants { conda_env = 'clair3-arm64' }
    aggregate_pileup_variants { conda_env = 'clair3-arm64' }
    select_het_snps { conda_env = 'clair3-arm64' }
    phase_contig { conda_env = 'clair3-arm64' }
    get_qual_filter { conda_env = 'clair3-arm64' }
    create_candidates { conda_env = 'clair3-arm64' }
    evaluate_candidates { conda_env = 'clair3-arm64' }
    aggregate_full_align_variants { conda_env = 'clair3-arm64' }
    merge_pileup_and_full_vars { conda_env = 'clair3-arm64' }
    aggregate_all_variants { conda_env = 'clair3-arm64' }

    sniffles2 { container = 'sniffles' }
    filter_sv_calls { container = 'sniffles_filter' }

    /*
    call_str { container = "str_container" }
    annotate_repeat_expansions  { container = "str_container" }
    merge_str_tsv  { container = "clair3" }
    merge_str_vcf  { container = "clair3" }
    make_str_report  { container = "str_container" }
    */
}
